[
["index.html", "A Guide to Crawl-ing with R About the Authors Preface", " A Guide to Crawl-ing with R Josh M. London and Devin S. Johnson 2017-02-19 About the Authors Drs. Josh M. London and Devin S. Johnson are researchers at the NOAA Alaska Fisheries Science Center’s Marine Mammal Laboratory in Seattle, Washington. Dr. London has over 10 years of experience programming and deploying satellite tags on phocid seals. He also has developed workflows for the management of telemetry data in R. Dr. Johnson is a leading biomatrician with expertise in the analysis of animal movement. Dr. Johnson is the lead author and developer of the R package crawl. Preface This book is being developed simultaneously with a 3-day workshop on the use of the crawl package for analysis of animal movment in R. Significant components of this book, example code, and content will change. Please use code and examples with caution and contact the authors before relying on advice, code, or examples for real-world analysis. Disclaimer This book is a scientific product and is not official communication of the Alaska Fisheries Science Center, the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All AFSC Marine Mammal Laboratory (AFSC-MML) GitHub project code is provided on an ‘as is’ basis and the user assumes responsibility for its use. AFSC-MML has relinquished control of the information and no longer has responsibility to protect the integrity, confidentiality, or availability of the information. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government. "],
["crawl-theory.html", "1 The Mathematics and Statistics of Animal Movement 1.1 Mathematics 1.2 Statistics", " 1 The Mathematics and Statistics of Animal Movement 1.1 Mathematics 1.1.1 Discrete-time random walks 1.1.2 Correlated random walks 1.1.3 Brownian motion 1.1.4 Ornstein-Ulenbeck (OU) process 1.1.5 Stochastic differential equations 1.1.6 Integrated SDEs 1.1.7 Continuous-time CRW 1.2 Statistics 1.2.1 Maximum likelihood inference 1.2.2 Bayesian inference 1.2.3 State-space models 1.2.4 Kalman filter/smoother (KFS) 1.2.5 Practical Bayesian inference 1.2.6 Process imputation "],
["crawl-practical.html", "2 A Pragmatic Guide for Analysis with crawl 2.1 Analysis and Coding Principles 2.2 Assembling Source Data 2.3 Tidy Data for Telemetry 2.4 Preparing Input Data for crawl 2.5 Determining Your Model Parameters 2.6 Exploring and Troubleshooting Model Results 2.7 Predicting a Movement Track 2.8 Simulating Tracks from the Posterior 2.9 Visualization of Results", " 2 A Pragmatic Guide for Analysis with crawl The crawl package is designed and built with the idea that it should be accessible and useful to a research biologist with some intermediate R skills and an understanding of the basic statistical theory behind the analysis of animal movement. This portion of the book will focus on providing the user with suggested principles, workflows, and pragmatic approaches that, if followed, should make analysis with crawl more efficient and reliable. As with anything in science and R, there are a number of right ways to approach a problem. The workflows and principles outline here aren’t the only way to use crawl. However, this content has been developed after years of working with researchers and troubleshooting common issues. For most users, following this guide will prove a successful endeavor. More advanced users or those with specific needs should feel free to refer to this as a starting point but then expand to meet their need. This content is broken up in the following sections: Analysis and Coding Principles Assembling Source Data Tidy Data for Telemetry Preparing Input Data for crawl Determining Your Model Parameters Exploring and Troubleshooting Model Results Predicting a Movement Track Simulating Tracks from the Posterior Visualization of Results 2.1 Analysis and Coding Principles 2.1.1 Source Data are Read Only 2.1.2 Script Everything 2.1.3 Document Along the Way 2.1.4 Embrace the Tidyverse 2.1.5 Anticipate Errors &amp; Trap Them 2.2 Assembling Source Data Where and how you access the source data for your telemetry study will depend on the type of tag and vendor. Argos location data is available to users from the Argos website and many third party sites and respositories (e.g. movebank, sea-turtle.org) have API connections to ArgosWeb that can faciliate data access. Each tag manufacturer often has additional data streams included within the Argos transmission that require specific software or processing to translate. Both the Sea Mammal Research Unit (SMRU) and Wildlife Computers provide online data portals that provide users access to the location and additional sensor data. Regardless of how the data are retrieved, these files should be treated as read only and not edited. ArgosWeb and vendors have, typically, kept the data formats and structure consistent over time. This affords end users the ability to develop custom processing scripts without much fear the formats will change and break their scripts. Here we will demonstrate the development of such a script using data downloaded from the Wildlife Computers data portal. All data are grouped by deployment and presented in various comma-separated files. The *-Locations.csv contains all of the Argos location estimates determined for the deployment. At a minimum, this file includes identifying columns such as DeployID, PTT, Date, Quality, Type, Latitude, and Longitude. If the Argos Kalman filtering approach has been enabled (which it should be for any modern tag deployment), then additional data will be found in columns that describe the error ellipses (e.g. Error Semi-major axis, Error Semi-minor axis, Error Ellipse orientation). Note, if the tag transmitted GPS/FastLoc data, this file will list those records as Type = 'FastGPS'. The other file of interest we will be working with is an example *-Histos.csv. These files include dive and haul-out behavior data derived from sensors on the tag. Most notably, the pressure transducer (for depth) and the salt-water switch (for determining wet/dry status). We will focus on processing this file to demonstrate how we can properly tidy our data. We will rely on the tidyverse set of packages plus purrr and lubridate to make reading and processing these files easier and more reliable. library(tidyverse) library(purrr) library(lubridate) The readr includes the read_csv() function which we will rely on to read the csv data into R. path_to_file &lt;- &quot;examples/data/160941-Locations.csv&quot; tbl_locs &lt;- readr::read_csv(path_to_file) ## Parsed with column specification: ## cols( ## DeployID = col_character(), ## Ptt = col_integer(), ## Instr = col_character(), ## Date = col_character(), ## Type = col_character(), ## Quality = col_character(), ## Latitude = col_double(), ## Longitude = col_double(), ## `Error radius` = col_integer(), ## `Error Semi-major axis` = col_integer(), ## `Error Semi-minor axis` = col_integer(), ## `Error Ellipse orientation` = col_integer(), ## Offset = col_character(), ## `Offset orientation` = col_character(), ## `GPE MSD` = col_character(), ## `GPE U` = col_character(), ## Count = col_character(), ## Comment = col_character() ## ) The readr::read_csv() function tries to interpret the proper data types for each of the columns and provides us the column specifications it determined. In most cases, the function gets this correct. However, if we examine the resulting tibble, we see that the Date column was read in as a character data type. str(tbl_locs) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 973 obs. of 18 variables: ## $ DeployID : chr &quot;PV2016_3024_15A0909&quot; &quot;PV2016_3024_15A0909&quot; &quot;PV2016_3024_15A0909&quot; &quot;PV2016_3024_15A0909&quot; ... ## $ Ptt : int 160941 160941 160941 160941 160941 160941 160941 160941 160941 160941 ... ## $ Instr : chr &quot;Mk10&quot; &quot;Mk10&quot; &quot;Mk10&quot; &quot;Mk10&quot; ... ## $ Date : chr &quot;03:08:48 22-Sep-2016&quot; &quot;03:38:04 22-Sep-2016&quot; &quot;04:00:45 22-Sep-2016&quot; &quot;04:47:41 22-Sep-2016&quot; ... ## $ Type : chr &quot;Argos&quot; &quot;Argos&quot; &quot;Argos&quot; &quot;Argos&quot; ... ## $ Quality : chr &quot;B&quot; &quot;A&quot; &quot;1&quot; &quot;3&quot; ... ## $ Latitude : num 52.7 52.7 52.7 52.7 52.8 ... ## $ Longitude : num 174 174 174 174 174 ... ## $ Error radius : int NA 217 655 189 272 850 3067 1761 3034 2796 ... ## $ Error Semi-major axis : int NA 454 2375 628 2336 3493 5343 3293 6088 6778 ... ## $ Error Semi-minor axis : int NA 103 180 56 31 206 1760 941 1512 1153 ... ## $ Error Ellipse orientation: int NA 105 113 62 78 69 91 85 96 94 ... ## $ Offset : chr NA NA NA NA ... ## $ Offset orientation : chr NA NA NA NA ... ## $ GPE MSD : chr NA NA NA NA ... ## $ GPE U : chr NA NA NA NA ... ## $ Count : chr NA NA NA NA ... ## $ Comment : chr NA NA NA NA ... ## - attr(*, &quot;spec&quot;)=List of 2 ## ..$ cols :List of 18 ## .. ..$ DeployID : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Ptt : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ Instr : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Date : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Type : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Quality : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Latitude : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Longitude : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Error radius : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ Error Semi-major axis : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ Error Semi-minor axis : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ Error Ellipse orientation: list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ Offset : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Offset orientation : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ GPE MSD : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ GPE U : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Count : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Comment : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## ..$ default: list() ## .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_guess&quot; &quot;collector&quot; ## ..- attr(*, &quot;class&quot;)= chr &quot;col_spec&quot; To correct this, we need to provide our own cols() specification. We can do this by simply modifying the specification readr::read_csv() provided us. In this case, we want the Date column to rely on col_datetime and to parse the character string using the format %H:%M:%S %d-%b-%Y. my_cols &lt;- cols( DeployID = col_character(), Ptt = col_integer(), Instr = col_character(), Date = col_datetime(&quot;%H:%M:%S %d-%b-%Y&quot;), # changed from col_character() Type = col_character(), Quality = col_character(), Latitude = col_double(), Longitude = col_double(), `Error radius` = col_integer(), `Error Semi-major axis` = col_integer(), `Error Semi-minor axis` = col_integer(), `Error Ellipse orientation` = col_integer(), Offset = col_character(), `Offset orientation` = col_character(), `GPE MSD` = col_character(), `GPE U` = col_character(), Count = col_character(), Comment = col_character() ) tbl_locs &lt;- readr::read_csv(path_to_file,col_types = my_cols) 2.3 Tidy Data for Telemetry 2.4 Preparing Input Data for crawl 2.5 Determining Your Model Parameters 2.6 Exploring and Troubleshooting Model Results 2.7 Predicting a Movement Track 2.8 Simulating Tracks from the Posterior 2.9 Visualization of Results "]
]
